package common

import (
	"fmt"
	"os/exec"
	"strings"
	"time"
)

// IPBanService –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP –±–∞–Ω–∞–º–∏
type IPBanService struct {
	Analyzer      *LogAnalyzer
	ConfigManager *ConfigManager
	BanManager    *BanManager
	IPTables      *IPTablesManager // –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iptables
	MaxIPs        int
	CheckInterval time.Duration
	GracePeriod   time.Duration
	Running       bool
	StopChan      chan bool
}

// NewIPBanService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å IP –±–∞–Ω–∞
func NewIPBanService(analyzer *LogAnalyzer, configManager *ConfigManager, banManager *BanManager, iptables *IPTablesManager, maxIPs int, checkInterval, gracePeriod time.Duration) *IPBanService {
	return &IPBanService{
		Analyzer:      analyzer,
		ConfigManager: configManager,
		BanManager:    banManager,
		IPTables:      iptables,
		MaxIPs:        maxIPs,
		CheckInterval: checkInterval,
		GracePeriod:   gracePeriod,
		Running:       false,
		StopChan:      make(chan bool, 1),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) Start() error {
	if s.Running {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	s.Running = true
	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫ IP Ban —Å–µ—Ä–≤–∏—Å–∞...\n")
	fmt.Printf("üìä –ú–∞–∫—Å–∏–º—É–º IP –Ω–∞ –∫–æ–Ω—Ñ–∏–≥: %d\n", s.MaxIPs)
	fmt.Printf("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v\n", s.CheckInterval)
	fmt.Printf("‚è≥ –ü–µ—Ä–∏–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è: %v\n", s.GracePeriod)
	fmt.Println(strings.Repeat("=", 50))

	go s.monitorLoop()
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) Stop() {
	if !s.Running {
		return
	}

	fmt.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ IP Ban —Å–µ—Ä–≤–∏—Å–∞...")
	s.Running = false
	s.StopChan <- true
}

// monitorLoop –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *IPBanService) monitorLoop() {
	ticker := time.NewTicker(s.CheckInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			s.performCheck()
		case <-s.StopChan:
			fmt.Println("‚úÖ IP Ban —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		}
	}
}

// performCheck –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
func (s *IPBanService) performCheck() {
	LogIPBanInfo("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏...")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏
	allConfigs, err := s.ConfigManager.GetConfigs()
	if err != nil {
		LogIPBanError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏: %v", err)
		return
	}

	if len(allConfigs) == 0 {
		LogIPBanInfo("–ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		return
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ IP
	logStats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		LogIPBanError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ IP –ø–æ email
	ipStatsMap := make(map[string]*EmailIPStats)
	for _, stats := range logStats {
		ipStatsMap[stats.Email] = stats
	}

	// –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã
	s.BanManager.CleanupExpiredBans()

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞–Ω—ã (–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ –¥–æ–ª—å—à–µ IP_COUNTER_RETENTION –Ω–∞–∑–∞–¥)
	s.BanManager.CleanupOldBans(IP_COUNTER_RETENTION)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–∞–Ω–µ–ª–∏
	suspiciousCount := 0
	normalCount := 0
	enabledCount := 0
	bannedCount := 0

	for _, config := range allConfigs {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if s.BanManager.IsBanned(config.Email) {
			banInfo := s.BanManager.GetBanInfo(config.Email)
			LogIPBanInfo("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: %s (–±–∞–Ω –¥–æ: %s)", config.Email, banInfo.ExpiresAt.Format("15:04:05 02.01.2006"))
			bannedCount++

			// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–Ω–µ–ª–∏, –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
			if config.Enable {
				LogIPBanInfo("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ %s –≤–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º!", config.Email)
				if err := s.ConfigManager.DisableConfig(config.Email); err != nil {
					LogIPBanError("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", config.Email, err)
				} else {
					LogIPBanInfo("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏", config.Email)
				}
			} else {
				LogIPBanInfo("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ %s —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏", config.Email)
			}
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É IP –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
		ipStats, hasActivity := ipStatsMap[config.Email]

		if hasActivity {
			// –ö–æ–Ω—Ñ–∏–≥ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∞—Ö
			if ipStats.TotalIPs > s.MaxIPs {
				// –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ - –±–∞–Ω–∏–º
				suspiciousCount++
				s.handleSuspiciousConfig(ipStats)
			} else {
				// –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ - –≤–∫–ª—é—á–∞–µ–º
				normalCount++
				s.handleNormalConfig(ipStats)
			}
		} else {
			// –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
			if !config.Enable {
				// –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –≤–∫–ª—é—á–∞–µ–º
				LogIPBanInfo("–ö–æ–Ω—Ñ–∏–≥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s (–æ—Ç–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º)", config.Email)
				if err := s.ConfigManager.EnableConfig(config.Email); err != nil {
					LogIPBanError("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", config.Email, err)
				} else {
					LogIPBanInfo("–ö–æ–Ω—Ñ–∏–≥ %s —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω", config.Email)
					enabledCount++
				}
			} else {
				// –í–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
			}
		}
	}

	LogIPBanInfo("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: %d", suspiciousCount)
	LogIPBanInfo("–ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: %d", normalCount)
	LogIPBanInfo("–í–∫–ª—é—á–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: %d", enabledCount)
	LogIPBanInfo("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: %d", bannedCount)
	LogIPBanInfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// handleSuspiciousConfig –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
func (s *IPBanService) handleSuspiciousConfig(stats *EmailIPStats) {
	LogIPBanInfo("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: %s (IP –∞–¥—Ä–µ—Å–æ–≤: %d, –º–∞–∫—Å–∏–º—É–º: %d)",
		stats.Email, stats.TotalIPs, s.MaxIPs)

	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	var ipAddresses []string
	for ip, activity := range stats.IPs {
		LogIPBanInfo("   üìç %s (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: %s)",
			ip, activity.Count, activity.LastSeen.Format("15:04:05"))
		ipAddresses = append(ipAddresses, ip)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if s.BanManager.IsBanned(stats.Email) {
		banInfo := s.BanManager.GetBanInfo(stats.Email)
		LogIPBanInfo("   ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω –¥–æ %s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±–∞–Ω",
			stats.Email, banInfo.ExpiresAt.Format("15:04:05 02.01.2006"))
		return
	}

	// –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	reason := fmt.Sprintf("–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ IP –∞–¥—Ä–µ—Å–æ–≤: %d (–º–∞–∫—Å–∏–º—É–º: %d)", stats.TotalIPs, s.MaxIPs)
	LogIPBanInfo("–ù–∞—á–∞–ª–æ –±–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (IP –∞–¥—Ä–µ—Å–æ–≤: %d, –ª–∏–º–∏—Ç: %d)", stats.Email, stats.TotalIPs, s.MaxIPs)

	if err := s.BanManager.BanUser(stats.Email, reason, ipAddresses); err != nil {
		LogIPBanError("–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", stats.Email, err)
		return
	}

	LogIPBanInfo("   üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ %d –º–∏–Ω—É—Ç", stats.Email, IP_BAN_DURATION)

	// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ —Ä–æ—Ç–∏—Ä—É–µ–º UUID, —á—Ç–æ–±—ã –æ–±—Ä—É–±–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ Xray
	LogIPBanInfo("   üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–æ—Ç–∞—Ü–∏—è UUID –¥–ª—è %s...", stats.Email)
	if _, err := s.ConfigManager.DisableAndRotateConfig(stats.Email); err != nil {
		LogIPBanError("‚ùå –û—à–∏–±–∫–∞ DisableAndRotateConfig –¥–ª—è %s: %v", stats.Email, err)
	} else {
		LogIPBanInfo("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥ %s –æ—Ç–∫–ª—é—á—ë–Ω, UUID –æ–±–Ω–æ–≤–ª—ë–Ω", stats.Email)
	}
}

// handleNormalConfig –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
func (s *IPBanService) handleNormalConfig(stats *EmailIPStats) {
	// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥–µ
	LogIPBanInfo("%s (IP –∞–¥—Ä–µ—Å–æ–≤: %d, –º–∞–∫—Å–∏–º—É–º: %d)", stats.Email, stats.TotalIPs, s.MaxIPs)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if s.BanManager.IsBanned(stats.Email) {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º IP
		LogIPBanInfo("   üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è %s...", stats.Email)

		unblockedCount := 0
		for ip := range stats.IPs {
			if err := s.IPTables.UnblockIP(ip); err != nil {
				LogIPBanError("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP %s: %v", ip, err)
			} else {
				unblockedCount++
			}
		}

		if unblockedCount > 0 {
			LogIPBanInfo("   ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ %d IP –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ iptables", unblockedCount)
		}
	} else {
		// –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –ø–∞–Ω–µ–ª–∏ - –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
		currentStatus, err := s.ConfigManager.GetConfigStatus(stats.Email)
		if err != nil {
			LogIPBanError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
		} else if !currentStatus {
			// –ö–æ–Ω—Ñ–∏–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è - –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
			LogIPBanInfo("   üîì –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ %s –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ - –≤–∫–ª—é—á–∞–µ–º!", stats.Email)
			if err := s.ConfigManager.EnableConfig(stats.Email); err != nil {
				LogIPBanError("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ %s: %v", stats.Email, err)
			} else {
				LogIPBanInfo("   ‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ %s —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏", stats.Email)
			}
		}
		// –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è,
		// —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏.
	}
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
func (s *IPBanService) GetStatus() map[string]interface{} {
	stats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		return map[string]interface{}{
			"running": s.Running,
			"error":   err.Error(),
		}
	}

	suspiciousCount := len(s.Analyzer.GetSuspiciousEmails(s.MaxIPs))
	normalCount := len(s.Analyzer.GetNormalEmails(s.MaxIPs))

	return map[string]interface{}{
		"running":            s.Running,
		"total_emails":       len(stats),
		"suspicious_count":   suspiciousCount,
		"normal_count":       normalCount,
		"max_ips_per_config": s.MaxIPs,
		"check_interval":     s.CheckInterval.String(),
		"grace_period":       s.GracePeriod.String(),
	}
}

// PrintCurrentStats –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (s *IPBanService) PrintCurrentStats() {
	fmt.Println("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")

	stats, err := s.Analyzer.AnalyzeLog()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v\n", err)
		return
	}

	if len(stats) == 0 {
		fmt.Println("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		return
	}

	suspiciousEmails := s.Analyzer.GetSuspiciousEmails(s.MaxIPs)
	normalEmails := s.Analyzer.GetNormalEmails(s.MaxIPs)

	fmt.Printf("üìà –í—Å–µ–≥–æ email: %d\n", len(stats))
	fmt.Printf("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: %d\n", len(suspiciousEmails))
	fmt.Printf("‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã—Ö: %d\n", len(normalEmails))

	fmt.Println("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
	for email, emailStats := range stats {
		status := "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
		if emailStats.TotalIPs > s.MaxIPs {
			status = "üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
		}

		fmt.Printf("  %s %s: %d IP\n", status, email, emailStats.TotalIPs)
	}
}

// IPTablesManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π IP —á–µ—Ä–µ–∑ iptables
type IPTablesManager struct {
	BlockedIPs map[string]bool // –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
}

// NewIPTablesManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä iptables
func NewIPTablesManager() *IPTablesManager {
	return &IPTablesManager{
		BlockedIPs: make(map[string]bool),
	}
}

// BlockIP –±–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ iptables
func (i *IPTablesManager) BlockIP(ipAddress string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ IP
	if i.BlockedIPs[ipAddress] {
		fmt.Printf("‚ÑπÔ∏è  IP %s —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n", ipAddress)
		// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: IP —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
		LogIPBanInfo("IP %s —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ iptables", ipAddress)
		return nil
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
	LogIPBanInfo("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP %s —á–µ—Ä–µ–∑ iptables", ipAddress)

	// –ë–ª–æ–∫–∏—Ä—É–µ–º IP —á–µ—Ä–µ–∑ iptables
	cmd := fmt.Sprintf("iptables -I INPUT -s %s -j DROP", ipAddress)
	if err := i.executeCommand(cmd); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
		LogIPBanError("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP %s —á–µ—Ä–µ–∑ iptables: %v", ipAddress, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP %s: %v", ipAddress, err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º IP –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
	i.BlockedIPs[ipAddress] = true
	fmt.Printf("‚úÖ IP %s —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ iptables\n", ipAddress)

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: —É—Å–ø–µ—à–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
	LogIPBanAction("IP_–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù", ipAddress, 0, []string{})

	return nil
}

// UnblockIP —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ iptables
func (i *IPTablesManager) UnblockIP(ipAddress string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP
	if !i.BlockedIPs[ipAddress] {
		fmt.Printf("‚ÑπÔ∏è  IP %s –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n", ipAddress)
		// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: IP –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
		LogIPBanInfo("IP %s –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ iptables", ipAddress)
		return nil
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: –Ω–∞—á–∞–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
	LogIPBanInfo("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP %s —á–µ—Ä–µ–∑ iptables", ipAddress)

	// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º IP —á–µ—Ä–µ–∑ iptables
	cmd := fmt.Sprintf("iptables -D INPUT -s %s -j DROP", ipAddress)
	if err := i.executeCommand(cmd); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: –æ—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
		LogIPBanError("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP %s —á–µ—Ä–µ–∑ iptables: %v", ipAddress, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP %s: %v", ipAddress, err)
	}

	// –£–¥–∞–ª—è–µ–º IP –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
	delete(i.BlockedIPs, ipAddress)
	fmt.Printf("‚úÖ IP %s —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ iptables\n", ipAddress)

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ bot.log: —É—Å–ø–µ—à–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
	LogIPBanAction("IP_–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù", ipAddress, 0, []string{})

	return nil
}

// executeCommand –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Å–∏—Å—Ç–µ–º–µ
func (i *IPTablesManager) executeCommand(cmd string) error {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º os/exec –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
	parts := strings.Fields(cmd)
	if len(parts) < 2 {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", cmd)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	execCmd := exec.Command(parts[0], parts[1:]...)
	output, err := execCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '%s': %v, output: %s", cmd, err, string(output))
	}

	return nil
}

// getIPAddressesFromStats –∏–∑–≤–ª–µ–∫–∞–µ—Ç IP –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func getIPAddressesFromStats(stats *EmailIPStats) []string {
	var ips []string
	for ip := range stats.IPs {
		ips = append(ips, ip)
	}
	return ips
}

// GetBlockedIPs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
func (i *IPTablesManager) GetBlockedIPs() []string {
	var ips []string
	for ip := range i.BlockedIPs {
		ips = append(ips, ip)
	}
	return ips
}

// IsIPBlocked –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP
func (i *IPTablesManager) IsIPBlocked(ipAddress string) bool {
	return i.BlockedIPs[ipAddress]
}
